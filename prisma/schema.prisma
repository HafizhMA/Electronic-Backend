// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(uuid())
  email                String             @unique
  password             String
  username             String?            @unique
  no_telp              String?
  token_reset_password String?
  cartItems            CartItem[]
  products             Product[]
  Checkout             Checkout[]
  AlamatPengiriman     AlamatPengiriman[]
}

model AlamatPengiriman {
  id         String     @id @default(uuid())
  userId     String
  alamat     String
  kotaId     String
  kota       String?
  provinsiId String
  provinsi   String?
  kodePos    String
  isDefault  Boolean    @default(false)
  User       User       @relation(fields: [userId], references: [id])
  Checkouts  Checkout[]
}

model JasaKirim {
  id          String     @id @default(uuid())
  namaJasa    String
  ongkosKirim Int
  cartItems   CartItem[]
}

model Product {
  id               String     @id @default(uuid())
  namaBarang       String
  deskripsiBarang  String
  img              String
  hargaBarang      Int
  quantity         Int
  size             String
  color            String
  berat            Int
  features         String
  capacity         String
  powerConsumption String
  dimensi          String
  kategori         String
  diskon           Int
  cartItems        CartItem[]
  userId           String
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int        @default(1)
  createdAt   DateTime   @default(now())
  checkoutId  String?
  checkout    Checkout?  @relation(fields: [checkoutId], references: [id], onDelete: SetNull)
  jasaKirimId String?
  jasaKirim   JasaKirim? @relation(fields: [jasaKirimId], references: [id], onDelete: Cascade)
}

model Checkout {
  id                 String            @id @default(uuid())
  userId             String
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  items              CartItem[]
  createdAt          DateTime          @default(now())
  AlamatPengiriman   AlamatPengiriman? @relation(fields: [alamatPengirimanId], references: [id], onDelete: SetNull)
  alamatPengirimanId String?
  pesan              String?
  payment            Payment[]
  purchasedItem      Json?
}

model Payment {
  id            String        @id @default(uuid())
  checkoutId    String
  checkout      Checkout      @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  paymentType   String?
  transactionId String
  paymentStatus PaymentStatus @default(PENDING)
  paymentUrl    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCESS
}
